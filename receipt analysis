#!/usr/bin/env python
# coding: utf-8

# In[1]:


latin_text = """
Sed ut perspiciatis, unde omnis iste natus error sit
voluptatem accusantium doloremque laudantium, totam
rem aperiam eaque ipsa, quae ab illo inventore
veritatis et quasi architecto beatae vitae dicta
sunt, explicabo. Nemo enim ipsam voluptatem, quia
voluptas sit, aspernatur aut odit aut fugit, sed
quia consequuntur magni dolores eos, qui ratione
voluptatem sequi nesciunt, neque porro quisquam est,
qui dolorem ipsum, quia dolor sit amet consectetur
adipisci[ng] velit, sed quia non numquam [do] eius
modi tempora inci[di]dunt, ut labore et dolore
magnam aliquam quaerat voluptatem. Ut enim ad minima
veniam, quis nostrum exercitationem ullam corporis
suscipit laboriosam, nisi ut aliquid ex ea commodi
consequatur? Quis autem vel eum iure reprehenderit,
qui in ea voluptate velit esse, quam nihil molestiae
consequatur, vel illum, qui dolorem eum fugiat, quo
voluptas nulla pariatur?

At vero eos et accusamus et iusto odio dignissimos
ducimus, qui blanditiis praesentium voluptatum
deleniti atque corrupti, quos dolores et quas
molestias excepturi sint, obcaecati cupiditate non
provident, similique sunt in culpa, qui officia
deserunt mollitia animi, id est laborum et dolorum
fuga. Et harum quidem rerum facilis est et expedita
distinctio. Nam libero tempore, cum soluta nobis est
eligendi optio, cumque nihil impedit, quo minus id,
quod maxime placeat, facere possimus, omnis voluptas
assumenda est, omnis dolor repellendus. Temporibus
autem quibusdam et aut officiis debitis aut rerum
necessitatibus saepe eveniet, ut et voluptates
repudiandae sint et molestiae non recusandae. Itaque
earum rerum hic tenetur a sapiente delectus, ut aut
reiciendis voluptatibus maiores alias consequatur
aut perferendis doloribus asperiores repellat.
"""

print("First 100 characters:\n  {} ...".format(latin_text[:100]))


# In[2]:


def normalize_string(s):#return a new string with (a) all characters converted to lowercase and (b) all non-alphabetic, non-whitespace characters removed.
    essential_charts=[c for c in s.lower() if c.isalpha() or c.isspace()]#保留空格及字母文字且转为小写
    return "".join(essential_charts)

print(normalize_string(latin_text[:100]))
#print(latin_text[:100], "...\n=>", normalize_string(latin_text[:100]), "...")
# receipt pool


# In[3]:


#It takes as input a string s (i.e., a str object). It should return a list of the words in s, after normalization per the definition of normalize_string()
def get_normalized_words(s):
    return normalize_string(s).split()

print ("First five words:\n{}".format (get_normalized_words (latin_text)[:5]))
#each receipt


# In[4]:


def make_itemsets(words):#列出receipt中每一项，不包括重复项
    return [set(s) for s in words]
print(make_itemsets(get_normalized_words (latin_text)[:5]))


# In[5]:


# defaultdict

from collections import defaultdict
s = 'mississippi'
d = defaultdict(int)
for k in s:
    d[k] += 1

sorted(d.items())


# In[6]:


D2 = defaultdict (int) # Empty dictionary

D2['existing-key'] = 5 # Create one key-value pair

D2['existing-key'] += 1 # Update
D2['new-key'] += 1

print (D2)


# In[11]:


from collections import defaultdict
from itertools import combinations # Hint!

def update_pair_counts (pair_counts, itemset):#成对出现的次数
    """
    Updates a dictionary of pair counts for
    all pairs of items in a given itemset.
    """
    assert type (pair_counts) is defaultdict

    ### BEGIN SOLUTION
    
    for (a, b) in combinations (itemset, 3):
        pair_counts[(a, b,)] += 1
        pair_counts[(b, a,)] += 1
        pair_counts[(a, b)] == pair_counts[(b, a)]
    #return pair_counts
    ### END SOLUTION
    
itemset_1 = set("error")
itemset_2 = set("dolor")
itemset_3=set('deolore')
pair_counts = defaultdict(int)

update_pair_counts(pair_counts, itemset_1)
assert len(pair_counts) == 6
update_pair_counts(pair_counts, itemset_2)
assert len(pair_counts) == 16
update_pair_counts(pair_counts, itemset_3)
print(pair_counts)
#print('"{}" + "{}"\n==> {}'.format (itemset_1, itemset_2, pair_counts))


# In[12]:


def update_item_counts(item_counts, itemset):#每一项单独出现的次数
    ### BEGIN SOLUTION
    for a in itemset:
        item_counts[a] += 1
    return item_counts
    ### END SOLUTION
itemset_1 = set("error")
itemset_2 = set("dolor")
item_counts = defaultdict(int)


print(update_item_counts(item_counts, itemset_1))
assert len(item_counts) == 3
update_item_counts(item_counts, itemset_2)
assert len(item_counts) == 5

assert item_counts['d'] == 1
assert item_counts['e'] == 1
assert item_counts['l'] == 1
assert item_counts['o'] == 2
assert item_counts['r'] == 2


# In[13]:


def filter_rules_by_conf (pair_counts, item_counts, threshold):
    rules = {} # (item_a, item_b) -> conf (item_a => item_b)
    ### BEGIN SOLUTION
    for (a, b) in pair_counts:
        assert a in item_counts
        conf_ab = pair_counts[(a, b)] / item_counts[a]
        if conf_ab >= threshold:
            rules[(a, b)] = conf_ab
    ### END SOLUTION
    return rules


# In[15]:


pair_counts = {('man', 'woman'): 5,
               ('bird', 'bee'): 3,
               ('red fish', 'blue fish'): 7}
item_counts = {'man': 7,
               'bird': 9,
               'red fish': 11}
rules = filter_rules_by_conf (pair_counts, item_counts, 0.5)
rules


# In[16]:


#优化后
def gen_rule_str(a, b, val=None, val_fmt='{:.3f}', sep=" = "):
    text = "{} => {}".format(a, b)
    if val:
        text = "conf(" + text + ")"
        text += sep + val_fmt.format(val)
    return text

def print_rules(rules):
    if type(rules) is dict or type(rules) is defaultdict:
        from operator import itemgetter
        ordered_rules = sorted(rules.items(), key=itemgetter(1), reverse=True)
    else: # Assume rules is iterable
        ordered_rules = [((a, b), None) for a, b in rules]
    for (a, b), conf_ab in ordered_rules:
        print(gen_rule_str(a, b, conf_ab))

# Demo:
print_rules(rules)


# In[18]:


#整合后
def find_assoc_rules(receipts, threshold):
    ### BEGIN SOLUTION
    pair_counts = defaultdict(int) # (item_a, item_b) -> count
    item_counts = defaultdict(int) # item -> count
    
    for itemset in receipts:
        update_pair_counts(pair_counts, itemset)
        update_item_counts(item_counts, itemset)
    rules = filter_rules_by_conf(pair_counts, item_counts, threshold)
    return rules
    ### END SOLUTION


# In[19]:


#以 latin_text 为例子
### BEGIN SOLUTION
latin_words = get_normalized_words(latin_text)
latin_itemsets = make_itemsets(latin_words)
latin_rules = find_assoc_rules(latin_itemsets, 0.75)
### END SOLUTION

# Inspect your result:
print_rules(latin_rules)


# In[ ]:




